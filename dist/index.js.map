{
  "version": 3,
  "sources": ["../lib/accessors.js", "../lib/ndarray.js", "../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar gsumpw = require( '@stdlib/blas-ext-base-gsumpw' ).ndarray;\n\n\n// MAIN //\n\n/**\n* Computes the variance of a strided array using a two-pass algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a two-pass approach, as suggested by Neely (1966).\n*\n* ## References\n*\n* -   Neely, Peter M. 1966. \"Comparison of Several Algorithms for Computation of Means, Standard Deviations and Correlation Coefficients.\" _Communications of the ACM_ 9 (7). Association for Computing Machinery: 496\u201399. doi:[10.1145/365719.365958](https://doi.org/10.1145/365719.365958).\n* -   Schubert, Erich, and Michael Gertz. 2018. \"Numerically Stable Parallel Computation of (Co-)Variance.\" In _Proceedings of the 30th International Conference on Scientific and Statistical Database Management_. New York, NY, USA: Association for Computing Machinery. doi:[10.1145/3221269.3223036](https://doi.org/10.1145/3221269.3223036).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} correction - degrees of freedom adjustment\n* @param {Object} x - input array object\n* @param {Collection} x.data - input array data\n* @param {Array<Function>} x.accessors - array element accessors\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} variance\n*\n* @example\n* var toAccessorArray = require( '@stdlib/array-base-to-accessor-array' );\n* var arraylike2object = require( '@stdlib/array-base-arraylike2object' );\n*\n* var x = toAccessorArray( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n*\n* var v = variancepn( 4, 1, arraylike2object( x ), 2, 1 );\n* // returns 6.25\n*/\nfunction variancepn( N, correction, x, strideX, offsetX ) {\n\tvar xbuf;\n\tvar get;\n\tvar mu;\n\tvar ix;\n\tvar M2;\n\tvar M;\n\tvar d;\n\tvar n;\n\tvar i;\n\n\t// Cache reference to array data:\n\txbuf = x.data;\n\n\t// Cache a reference to the element accessor:\n\tget = x.accessors[ 0 ];\n\n\t// Compute an estimate for the mean:\n\tmu = gsumpw( N, xbuf, strideX, offsetX ) / N;\n\n\tn = N - correction;\n\tix = offsetX;\n\n\t// Compute the variance...\n\tM2 = 0.0;\n\tM = 0.0;\n\n\tfor ( i = 0; i < N; i++ ) {\n\t\td = get( xbuf, ix ) - mu;\n\t\tM2 += d * d;\n\t\tM += d;\n\t\tix += strideX;\n\t}\n\treturn (M2/n) - ((M/N)*(M/n));\n}\n\n\n// EXPORTS //\n\nmodule.exports = variancepn;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar gsumpw = require( '@stdlib/blas-ext-base-gsumpw' ).ndarray;\nvar arraylike2object = require( '@stdlib/array-base-arraylike2object' );\nvar accessors = require( './accessors.js' );\n\n\n// MAIN //\n\n/**\n* Computes the variance of a strided array using a two-pass algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a two-pass approach, as suggested by Neely (1966).\n*\n* ## References\n*\n* -   Neely, Peter M. 1966. \"Comparison of Several Algorithms for Computation of Means, Standard Deviations and Correlation Coefficients.\" _Communications of the ACM_ 9 (7). Association for Computing Machinery: 496\u201399. doi:[10.1145/365719.365958](https://doi.org/10.1145/365719.365958).\n* -   Schubert, Erich, and Michael Gertz. 2018. \"Numerically Stable Parallel Computation of (Co-)Variance.\" In _Proceedings of the 30th International Conference on Scientific and Statistical Database Management_. New York, NY, USA: Association for Computing Machinery. doi:[10.1145/3221269.3223036](https://doi.org/10.1145/3221269.3223036).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} correction - degrees of freedom adjustment\n* @param {NumericArray} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} variance\n*\n* @example\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n*\n* var v = variancepn( 4, 1, x, 2, 1 );\n* // returns 6.25\n*/\nfunction variancepn( N, correction, x, strideX, offsetX ) {\n\tvar mu;\n\tvar ix;\n\tvar M2;\n\tvar o;\n\tvar M;\n\tvar d;\n\tvar n;\n\tvar i;\n\n\tn = N - correction;\n\tif ( N <= 0 || n <= 0.0 ) {\n\t\treturn NaN;\n\t}\n\tif ( N === 1 || strideX === 0 ) {\n\t\treturn 0.0;\n\t}\n\to = arraylike2object( x );\n\tif ( o.accessorProtocol ) {\n\t\treturn accessors( N, correction, o, strideX, offsetX );\n\t}\n\t// Compute an estimate for the mean:\n\tmu = gsumpw( N, x, strideX, offsetX ) / N;\n\n\t// Compute the variance...\n\tix = offsetX;\n\tM2 = 0.0;\n\tM = 0.0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\td = x[ ix ] - mu;\n\t\tM2 += d * d;\n\t\tM += d;\n\t\tix += strideX;\n\t}\n\treturn (M2/n) - ((M/N)*(M/n));\n}\n\n\n// EXPORTS //\n\nmodule.exports = variancepn;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar stride2offset = require( '@stdlib/strided-base-stride2offset' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\n/**\n* Computes the variance of a strided array using a two-pass algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a two-pass approach, as suggested by Neely (1966).\n*\n* ## References\n*\n* -   Neely, Peter M. 1966. \"Comparison of Several Algorithms for Computation of Means, Standard Deviations and Correlation Coefficients.\" _Communications of the ACM_ 9 (7). Association for Computing Machinery: 496\u201399. doi:[10.1145/365719.365958](https://doi.org/10.1145/365719.365958).\n* -   Schubert, Erich, and Michael Gertz. 2018. \"Numerically Stable Parallel Computation of (Co-)Variance.\" In _Proceedings of the 30th International Conference on Scientific and Statistical Database Management_. New York, NY, USA: Association for Computing Machinery. doi:[10.1145/3221269.3223036](https://doi.org/10.1145/3221269.3223036).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} correction - degrees of freedom adjustment\n* @param {Object} x - input array object\n* @param {Array<Function>} x.accessors - array element accessors\n* @param {integer} strideX - stride length\n* @param {integer} offsetX - starting index\n* @returns {number} variance\n*\n* @example\n* var x = [ 1.0, -2.0, 2.0 ];\n*\n* var v = variancepn( x.length, 1, x, 1);\n* // returns ~4.3333\n*/\nfunction variancepn( N, correction, x, strideX ) {\n\treturn ndarray( N, correction, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nmodule.exports = variancepn;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the variance of a strided array using a two-pass algorithm.\n*\n* @module @stdlib/stats-base-variancepn\n*\n* @example\n* var variancepn = require( '@stdlib/stats-base-variancepn' );\n*\n* var x = [ 1.0, -2.0, 2.0 ];\n*\n* var v = variancepn( x.length, 1, x, 1 );\n* // returns ~4.3333\n*\n* @example\n* var variancepn = require( '@stdlib/stats-base-variancepn' );\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n*\n* var v = variancepn.ndarray( 4, 1, x, 2, 1 );\n* // returns 6.25\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n\n// exports: { \"ndarray\": \"main.ndarray\" }\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAS,QAAS,8BAA+B,EAAE,QAmCvD,SAASC,EAAYC,EAAGC,EAAYC,EAAGC,EAASC,EAAU,CACzD,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAkBJ,IAfAR,EAAOH,EAAE,KAGTI,EAAMJ,EAAE,UAAW,CAAE,EAGrBK,EAAKT,EAAQE,EAAGK,EAAMF,EAASC,CAAQ,EAAIJ,EAE3CY,EAAIZ,EAAIC,EACRO,EAAKJ,EAGLK,EAAK,EACLC,EAAI,EAEEG,EAAI,EAAGA,EAAIb,EAAGa,IACnBF,EAAIL,EAAKD,EAAMG,CAAG,EAAID,EACtBE,GAAME,EAAIA,EACVD,GAAKC,EACLH,GAAML,EAEP,OAAQM,EAAGG,EAAOF,EAAEV,GAAIU,EAAEE,EAC3B,CAKAf,EAAO,QAAUE,IChGjB,IAAAe,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAS,QAAS,8BAA+B,EAAE,QACnDC,EAAmB,QAAS,qCAAsC,EAClEC,EAAY,IA8BhB,SAASC,EAAYC,EAAGC,EAAYC,EAAGC,EAASC,EAAU,CACzD,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAGJ,GADAD,EAAIX,EAAIC,EACHD,GAAK,GAAKW,GAAK,EACnB,MAAO,KAER,GAAKX,IAAM,GAAKG,IAAY,EAC3B,MAAO,GAGR,GADAK,EAAIX,EAAkBK,CAAE,EACnBM,EAAE,iBACN,OAAOV,EAAWE,EAAGC,EAAYO,EAAGL,EAASC,CAAQ,EAStD,IANAC,EAAKT,EAAQI,EAAGE,EAAGC,EAASC,CAAQ,EAAIJ,EAGxCM,EAAKF,EACLG,EAAK,EACLE,EAAI,EACEG,EAAI,EAAGA,EAAIZ,EAAGY,IACnBF,EAAIR,EAAGI,CAAG,EAAID,EACdE,GAAMG,EAAIA,EACVD,GAAKC,EACLJ,GAAMH,EAEP,OAAQI,EAAGI,EAAOF,EAAET,GAAIS,EAAEE,EAC3B,CAKAhB,EAAO,QAAUI,IC9FjB,IAAAc,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAgB,QAAS,oCAAqC,EAC9DC,EAAU,IA+Bd,SAASC,EAAYC,EAAGC,EAAYC,EAAGC,EAAU,CAChD,OAAOL,EAASE,EAAGC,EAAYC,EAAGC,EAASN,EAAeG,EAAGG,CAAQ,CAAE,CACxE,CAKAP,EAAO,QAAUG,ICjBjB,IAAIK,EAAc,QAAS,uDAAwD,EAC/EC,EAAO,IACPC,EAAU,IAKdF,EAAaC,EAAM,UAAWC,CAAQ,EAKtC,OAAO,QAAUD",
  "names": ["require_accessors", "__commonJSMin", "exports", "module", "gsumpw", "variancepn", "N", "correction", "x", "strideX", "offsetX", "xbuf", "get", "mu", "ix", "M2", "M", "d", "n", "i", "require_ndarray", "__commonJSMin", "exports", "module", "gsumpw", "arraylike2object", "accessors", "variancepn", "N", "correction", "x", "strideX", "offsetX", "mu", "ix", "M2", "o", "M", "d", "n", "i", "require_main", "__commonJSMin", "exports", "module", "stride2offset", "ndarray", "variancepn", "N", "correction", "x", "strideX", "setReadOnly", "main", "ndarray"]
}
