{
  "version": 3,
  "sources": ["../lib/variancepn.js", "../lib/ndarray.js", "../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar gsumpw = require( '@stdlib/blas-ext-base-gsumpw' );\n\n\n// MAIN //\n\n/**\n* Computes the variance of a strided array using a two-pass algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a two-pass approach, as suggested by Neely (1966).\n*\n* ## References\n*\n* -   Neely, Peter M. 1966. \"Comparison of Several Algorithms for Computation of Means, Standard Deviations and Correlation Coefficients.\" _Communications of the ACM_ 9 (7). Association for Computing Machinery: 496\u201399. doi:[10.1145/365719.365958](https://doi.org/10.1145/365719.365958).\n* -   Schubert, Erich, and Michael Gertz. 2018. \"Numerically Stable Parallel Computation of (Co-)Variance.\" In _Proceedings of the 30th International Conference on Scientific and Statistical Database Management_. New York, NY, USA: Association for Computing Machinery. doi:[10.1145/3221269.3223036](https://doi.org/10.1145/3221269.3223036).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} correction - degrees of freedom adjustment\n* @param {NumericArray} x - input array\n* @param {integer} stride - stride length\n* @returns {number} variance\n*\n* @example\n* var x = [ 1.0, -2.0, 2.0 ];\n* var N = x.length;\n*\n* var v = variancepn( N, 1, x, 1 );\n* // returns ~4.3333\n*/\nfunction variancepn( N, correction, x, stride ) {\n\tvar mu;\n\tvar ix;\n\tvar M2;\n\tvar M;\n\tvar d;\n\tvar n;\n\tvar i;\n\n\tn = N - correction;\n\tif ( N <= 0 || n <= 0.0 ) {\n\t\treturn NaN;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn 0.0;\n\t}\n\t// Compute an estimate for the mean:\n\tmu = gsumpw( N, x, stride ) / N;\n\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\t// Compute the variance...\n\tM2 = 0.0;\n\tM = 0.0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\td = x[ ix ] - mu;\n\t\tM2 += d * d;\n\t\tM += d;\n\t\tix += stride;\n\t}\n\treturn (M2/n) - ((M/N)*(M/n));\n}\n\n\n// EXPORTS //\n\nmodule.exports = variancepn;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar gsumpw = require( '@stdlib/blas-ext-base-gsumpw' ).ndarray;\n\n\n// MAIN //\n\n/**\n* Computes the variance of a strided array using a two-pass algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a two-pass approach, as suggested by Neely (1966).\n*\n* ## References\n*\n* -   Neely, Peter M. 1966. \"Comparison of Several Algorithms for Computation of Means, Standard Deviations and Correlation Coefficients.\" _Communications of the ACM_ 9 (7). Association for Computing Machinery: 496\u201399. doi:[10.1145/365719.365958](https://doi.org/10.1145/365719.365958).\n* -   Schubert, Erich, and Michael Gertz. 2018. \"Numerically Stable Parallel Computation of (Co-)Variance.\" In _Proceedings of the 30th International Conference on Scientific and Statistical Database Management_. New York, NY, USA: Association for Computing Machinery. doi:[10.1145/3221269.3223036](https://doi.org/10.1145/3221269.3223036).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} correction - degrees of freedom adjustment\n* @param {NumericArray} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} variance\n*\n* @example\n* var floor = require( '@stdlib/math-base-special-floor' );\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n* var N = floor( x.length / 2 );\n*\n* var v = variancepn( N, 1, x, 2, 1 );\n* // returns 6.25\n*/\nfunction variancepn( N, correction, x, stride, offset ) {\n\tvar mu;\n\tvar ix;\n\tvar M2;\n\tvar M;\n\tvar d;\n\tvar n;\n\tvar i;\n\n\tn = N - correction;\n\tif ( N <= 0 || n <= 0.0 ) {\n\t\treturn NaN;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn 0.0;\n\t}\n\t// Compute an estimate for the mean:\n\tmu = gsumpw( N, x, stride, offset ) / N;\n\n\t// Compute the variance...\n\tix = offset;\n\tM2 = 0.0;\n\tM = 0.0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\td = x[ ix ] - mu;\n\t\tM2 += d * d;\n\t\tM += d;\n\t\tix += stride;\n\t}\n\treturn (M2/n) - ((M/N)*(M/n));\n}\n\n\n// EXPORTS //\n\nmodule.exports = variancepn;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar variancepn = require( './variancepn.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( variancepn, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = variancepn;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the variance of a strided array using a two-pass algorithm.\n*\n* @module @stdlib/stats-base-variancepn\n*\n* @example\n* var variancepn = require( '@stdlib/stats-base-variancepn' );\n*\n* var x = [ 1.0, -2.0, 2.0 ];\n* var N = x.length;\n*\n* var v = variancepn( N, 1, x, 1 );\n* // returns ~4.3333\n*\n* @example\n* var floor = require( '@stdlib/math-base-special-floor' );\n* var variancepn = require( '@stdlib/stats-base-variancepn' );\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n* var N = floor( x.length / 2 );\n*\n* var v = variancepn.ndarray( N, 1, x, 2, 1 );\n* // returns 6.25\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n\n// exports: { \"ndarray\": \"main.ndarray\" }\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAS,QAAS,8BAA+B,EA8BrD,SAASC,EAAYC,EAAGC,EAAYC,EAAGC,EAAS,CAC/C,IAAIC,EACAC,EACAC,EACAC,EACAC,EACA,EACA,EAGJ,GADA,EAAIR,EAAIC,EACHD,GAAK,GAAK,GAAK,EACnB,MAAO,KAER,GAAKA,IAAM,GAAKG,IAAW,EAC1B,MAAO,GAaR,IAVAC,EAAKN,EAAQE,EAAGE,EAAGC,CAAO,EAAIH,EAEzBG,EAAS,EACbE,GAAM,EAAEL,GAAKG,EAEbE,EAAK,EAGNC,EAAK,EACLC,EAAI,EACE,EAAI,EAAG,EAAIP,EAAG,IACnBQ,EAAIN,EAAGG,CAAG,EAAID,EACdE,GAAME,EAAIA,EACVD,GAAKC,EACLH,GAAMF,EAEP,OAAQG,EAAG,EAAOC,EAAEP,GAAIO,EAAE,EAC3B,CAKAV,EAAO,QAAUE,IC3FjB,IAAAU,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAS,QAAS,8BAA+B,EAAE,QAiCvD,SAASC,EAAYC,EAAGC,EAAYC,EAAGC,EAAQC,EAAS,CACvD,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAGJ,GADAD,EAAIV,EAAIC,EACHD,GAAK,GAAKU,GAAK,EACnB,MAAO,KAER,GAAKV,IAAM,GAAKG,IAAW,EAC1B,MAAO,GASR,IANAE,EAAKP,EAAQE,EAAGE,EAAGC,EAAQC,CAAO,EAAIJ,EAGtCM,EAAKF,EACLG,EAAK,EACLC,EAAI,EACEG,EAAI,EAAGA,EAAIX,EAAGW,IACnBF,EAAIP,EAAGI,CAAG,EAAID,EACdE,GAAME,EAAIA,EACVD,GAAKC,EACLH,GAAMH,EAEP,OAAQI,EAAGG,EAAOF,EAAER,GAAIQ,EAAEE,EAC3B,CAKAb,EAAO,QAAUE,IC1FjB,IAAAa,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAc,QAAS,uDAAwD,EAC/EC,EAAa,IACbC,EAAU,IAKdF,EAAaC,EAAY,UAAWC,CAAQ,EAK5CH,EAAO,QAAUE,ICajB,IAAIE,EAAO,IAKX,OAAO,QAAUA",
  "names": ["require_variancepn", "__commonJSMin", "exports", "module", "gsumpw", "variancepn", "N", "correction", "x", "stride", "mu", "ix", "M2", "M", "d", "require_ndarray", "__commonJSMin", "exports", "module", "gsumpw", "variancepn", "N", "correction", "x", "stride", "offset", "mu", "ix", "M2", "M", "d", "n", "i", "require_main", "__commonJSMin", "exports", "module", "setReadOnly", "variancepn", "ndarray", "main"]
}
